{"ast":null,"code":"'use strict';\n\nimport _asyncToGenerator from \"C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\mini-project-master\\\\mini-project-master\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\n\nvar Axios = /*#__PURE__*/function () {\n  function Axios(instanceConfig) {\n    _classCallCheck(this, Axios);\n\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n\n\n  _createClass(Axios, [{\n    key: \"request\",\n    value: function () {\n      var _request2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(configOrUrl, config) {\n        var dummy, stack;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._request(configOrUrl, config);\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (_context.t0 instanceof Error) {\n                  Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error(); // slice off the Error: ... line\n\n                  stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n\n                  try {\n                    if (!_context.t0.stack) {\n                      _context.t0.stack = stack; // match without the 2 top stack lines\n                    } else if (stack && !String(_context.t0.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n                      _context.t0.stack += '\\n' + stack;\n                    }\n                  } catch (e) {// ignore the case where \"stack\" is an un-writable property\n                  }\n                }\n\n                throw _context.t0;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n\n      function request(_x, _x2) {\n        return _request2.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }, {\n    key: \"_request\",\n    value: function _request(configOrUrl, config) {\n      /*eslint no-param-reassign:0*/\n      // Allow for axios('example/url'[, config]) a la fetch API\n      if (typeof configOrUrl === 'string') {\n        config = config || {};\n        config.url = configOrUrl;\n      } else {\n        config = configOrUrl || {};\n      }\n\n      config = mergeConfig(this.defaults, config);\n      var _config = config,\n          transitional = _config.transitional,\n          paramsSerializer = _config.paramsSerializer,\n          headers = _config.headers;\n\n      if (transitional !== undefined) {\n        validator.assertOptions(transitional, {\n          silentJSONParsing: validators.transitional(validators.boolean),\n          forcedJSONParsing: validators.transitional(validators.boolean),\n          clarifyTimeoutError: validators.transitional(validators.boolean)\n        }, false);\n      }\n\n      if (paramsSerializer != null) {\n        if (utils.isFunction(paramsSerializer)) {\n          config.paramsSerializer = {\n            serialize: paramsSerializer\n          };\n        } else {\n          validator.assertOptions(paramsSerializer, {\n            encode: validators.function,\n            serialize: validators.function\n          }, true);\n        }\n      } // Set config.method\n\n\n      config.method = (config.method || this.defaults.method || 'get').toLowerCase(); // Flatten headers\n\n      var contextHeaders = headers && utils.merge(headers.common, headers[config.method]);\n      headers && utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function (method) {\n        delete headers[method];\n      });\n      config.headers = AxiosHeaders.concat(contextHeaders, headers); // filter out skipped interceptors\n\n      var requestInterceptorChain = [];\n      var synchronousRequestInterceptors = true;\n      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n          return;\n        }\n\n        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n      });\n      var responseInterceptorChain = [];\n      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n      });\n      var promise;\n      var i = 0;\n      var len;\n\n      if (!synchronousRequestInterceptors) {\n        var chain = [dispatchRequest.bind(this), undefined];\n        chain.unshift.apply(chain, requestInterceptorChain);\n        chain.push.apply(chain, responseInterceptorChain);\n        len = chain.length;\n        promise = Promise.resolve(config);\n\n        while (i < len) {\n          promise = promise.then(chain[i++], chain[i++]);\n        }\n\n        return promise;\n      }\n\n      len = requestInterceptorChain.length;\n      var newConfig = config;\n      i = 0;\n\n      while (i < len) {\n        var onFulfilled = requestInterceptorChain[i++];\n        var onRejected = requestInterceptorChain[i++];\n\n        try {\n          newConfig = onFulfilled(newConfig);\n        } catch (error) {\n          onRejected.call(this, error);\n          break;\n        }\n      }\n\n      try {\n        promise = dispatchRequest.call(this, newConfig);\n      } catch (error) {\n        return Promise.reject(error);\n      }\n\n      i = 0;\n      len = responseInterceptorChain.length;\n\n      while (i < len) {\n        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n      }\n\n      return promise;\n    }\n  }, {\n    key: \"getUri\",\n    value: function getUri(config) {\n      config = mergeConfig(this.defaults, config);\n      var fullPath = buildFullPath(config.baseURL, config.url);\n      return buildURL(fullPath, config.params, config.paramsSerializer);\n    }\n  }]);\n\n  return Axios;\n}(); // Provide aliases for supported request methods\n\n\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method: method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url: url,\n        data: data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\nexport default Axios;","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/axios/lib/core/Axios.js"],"names":["utils","buildURL","InterceptorManager","dispatchRequest","mergeConfig","buildFullPath","validator","AxiosHeaders","validators","Axios","instanceConfig","defaults","interceptors","request","response","configOrUrl","config","_request","Error","captureStackTrace","dummy","stack","replace","String","endsWith","e","url","transitional","paramsSerializer","headers","undefined","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","clarifyTimeoutError","isFunction","serialize","encode","function","method","toLowerCase","contextHeaders","merge","common","forEach","concat","requestInterceptorChain","synchronousRequestInterceptors","unshiftRequestInterceptors","interceptor","runWhen","synchronous","unshift","fulfilled","rejected","responseInterceptorChain","pushResponseInterceptors","push","promise","i","len","chain","bind","apply","length","Promise","resolve","then","newConfig","onFulfilled","onRejected","error","call","reject","fullPath","baseURL","params","forEachMethodNoData","prototype","data","forEachMethodWithData","generateHTTPMethod","isForm","httpMethod"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n"]},"metadata":{},"sourceType":"module"}