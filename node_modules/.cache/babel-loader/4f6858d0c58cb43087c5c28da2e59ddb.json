{"ast":null,"code":"// import React, { useEffect, useRef } from 'react';\n// import Codemirror from 'codemirror';\n// import 'codemirror/lib/codemirror.css';\n// import 'codemirror/theme/dracula.css';\n// import 'codemirror/mode/javascript/javascript';\n// import 'codemirror/addon/edit/closetag';\n// import 'codemirror/addon/edit/closebrackets';\n// import ACTIONS from '../Actions';\n// const Editor = ({ socketRef, roomId, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     useEffect(() => {\n//         async function init() {\n//             editorRef.current = Codemirror.fromTextArea(\n//                 document.getElementById('realtimeEditor'),\n//                 {\n//                     mode: { name: 'javascript', json: true },\n//                     theme: 'dracula',\n//                     autoCloseTags: true,\n//                     autoCloseBrackets: true,\n//                     lineNumbers: true,\n//                 }\n//             );\n//             editorRef.current.on('change', (instance, changes) => {\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code);\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomId,\n//                         code,\n//                     });\n//                 }\n//             });\n//         }\n//         init();\n//     }, []);\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.setValue(code);\n//                 }\n//             });\n//         }\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE);\n//         };\n//     }, [socketRef.current]);\n//     return <textarea id=\"realtimeEditor\"></textarea>;\n// };\n// export default Editor;","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/src/components/Editor.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import React, { useEffect, useRef } from 'react';\n// import Codemirror from 'codemirror';\n// import 'codemirror/lib/codemirror.css';\n// import 'codemirror/theme/dracula.css';\n// import 'codemirror/mode/javascript/javascript';\n// import 'codemirror/addon/edit/closetag';\n// import 'codemirror/addon/edit/closebrackets';\n// import ACTIONS from '../Actions';\n\n// const Editor = ({ socketRef, roomId, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     useEffect(() => {\n//         async function init() {\n//             editorRef.current = Codemirror.fromTextArea(\n//                 document.getElementById('realtimeEditor'),\n//                 {\n//                     mode: { name: 'javascript', json: true },\n//                     theme: 'dracula',\n//                     autoCloseTags: true,\n//                     autoCloseBrackets: true,\n//                     lineNumbers: true,\n//                 }\n//             );\n\n//             editorRef.current.on('change', (instance, changes) => {\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code);\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomId,\n//                         code,\n//                     });\n//                 }\n//             });\n//         }\n//         init();\n//     }, []);\n\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.setValue(code);\n//                 }\n//             });\n//         }\n\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE);\n//         };\n//     }, [socketRef.current]);\n\n//     return <textarea id=\"realtimeEditor\"></textarea>;\n// };\n\n// export default Editor;\n"]},"metadata":{},"sourceType":"module"}