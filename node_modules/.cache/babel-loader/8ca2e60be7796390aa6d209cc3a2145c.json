{"ast":null,"code":"import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\n\nvar composeSignals = function composeSignals(signals, timeout) {\n  var controller = new AbortController();\n  var aborted;\n\n  var onabort = function onabort(cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      var err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n    }\n  };\n\n  var timer = timeout && setTimeout(function () {\n    onabort(new AxiosError(\"timeout \".concat(timeout, \" of ms exceeded\"), AxiosError.ETIMEDOUT));\n  }, timeout);\n\n  var unsubscribe = function unsubscribe() {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(function (signal) {\n        signal && (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  };\n\n  signals.forEach(function (signal) {\n    return signal && signal.addEventListener && signal.addEventListener('abort', onabort);\n  });\n  var signal = controller.signal;\n  signal.unsubscribe = unsubscribe;\n  return [signal, function () {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n};\n\nexport default composeSignals;","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/axios/lib/helpers/composeSignals.js"],"names":["CanceledError","AxiosError","composeSignals","signals","timeout","controller","AbortController","aborted","onabort","cancel","unsubscribe","err","Error","reason","abort","message","timer","setTimeout","ETIMEDOUT","clearTimeout","forEach","signal","removeEventListener","addEventListener"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAC3C,MAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AAEA,MAAIC,OAAJ;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAUC,MAAV,EAAkB;AAChC,QAAI,CAACF,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,IAAV;AACAG,MAAAA,WAAW;AACX,UAAMC,GAAG,GAAGF,MAAM,YAAYG,KAAlB,GAA0BH,MAA1B,GAAmC,KAAKI,MAApD;AACAR,MAAAA,UAAU,CAACS,KAAX,CAAiBH,GAAG,YAAYV,UAAf,GAA4BU,GAA5B,GAAkC,IAAIX,aAAJ,CAAkBW,GAAG,YAAYC,KAAf,GAAuBD,GAAG,CAACI,OAA3B,GAAqCJ,GAAvD,CAAnD;AACD;AACF,GAPD;;AASA,MAAIK,KAAK,GAAGZ,OAAO,IAAIa,UAAU,CAAC,YAAM;AACtCT,IAAAA,OAAO,CAAC,IAAIP,UAAJ,mBAA0BG,OAA1B,sBAAoDH,UAAU,CAACiB,SAA/D,CAAD,CAAP;AACD,GAFgC,EAE9Bd,OAF8B,CAAjC;;AAIA,MAAMM,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAIP,OAAJ,EAAa;AACXa,MAAAA,KAAK,IAAIG,YAAY,CAACH,KAAD,CAArB;AACAA,MAAAA,KAAK,GAAG,IAAR;AACAb,MAAAA,OAAO,CAACiB,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACxBA,QAAAA,MAAM,KACLA,MAAM,CAACC,mBAAP,GAA6BD,MAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAoCd,OAApC,CAA7B,GAA4Ea,MAAM,CAACX,WAAP,CAAmBF,OAAnB,CADvE,CAAN;AAED,OAHD;AAIAL,MAAAA,OAAO,GAAG,IAAV;AACD;AACF,GAVD;;AAYAA,EAAAA,OAAO,CAACiB,OAAR,CAAgB,UAACC,MAAD;AAAA,WAAYA,MAAM,IAAIA,MAAM,CAACE,gBAAjB,IAAqCF,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiCf,OAAjC,CAAjD;AAAA,GAAhB;AAEA,MAAOa,MAAP,GAAiBhB,UAAjB,CAAOgB,MAAP;AAEAA,EAAAA,MAAM,CAACX,WAAP,GAAqBA,WAArB;AAEA,SAAO,CAACW,MAAD,EAAS,YAAM;AACpBL,IAAAA,KAAK,IAAIG,YAAY,CAACH,KAAD,CAArB;AACAA,IAAAA,KAAK,GAAG,IAAR;AACD,GAHM,CAAP;AAID,CAxCD;;AA0CA,eAAed,cAAf","sourcesContent":["import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst composeSignals = (signals, timeout) => {\n  let controller = new AbortController();\n\n  let aborted;\n\n  const onabort = function (cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      const err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n    }\n  }\n\n  let timer = timeout && setTimeout(() => {\n    onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n  }, timeout)\n\n  const unsubscribe = () => {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(signal => {\n        signal &&\n        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  }\n\n  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));\n\n  const {signal} = controller;\n\n  signal.unsubscribe = unsubscribe;\n\n  return [signal, () => {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n}\n\nexport default composeSignals;\n"]},"metadata":{},"sourceType":"module"}