{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\n\nexport class Socket extends Emitter {\n  /**\n   * `Socket` constructor.\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n\n    this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n\n    this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n\n    this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n\n    this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n\n    this._queue = [];\n    /**\n     * A sequence to generate the ID of the {@link QueuedPacket}.\n     * @private\n     */\n\n    this._queueSeq = 0;\n    this.ids = 0;\n    /**\n     * A map containing acknowledgement handlers.\n     *\n     * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n     *\n     * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n     * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n     * - `const value = await socket.emitWithAck(\"test\")`\n     *\n     * From those that don't:\n     *\n     * - `socket.emit(\"test\", (value) => { ... });`\n     *\n     * In the first case, the handlers will be called with an error when:\n     *\n     * - the timeout is reached\n     * - the socket gets disconnected\n     *\n     * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n     * an acknowledgement from the server.\n     *\n     * @private\n     */\n\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n\n\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n\n\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n   *\n   * @example\n   * const socket = io();\n   *\n   * console.log(socket.active); // true\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   if (reason === \"io server disconnect\") {\n   *     // the disconnection was initiated by the server, you need to manually reconnect\n   *     console.log(socket.active); // false\n   *   }\n   *   // else the socket will automatically try to reconnect\n   *   console.log(socket.active); // true\n   * });\n   */\n\n\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @example\n   * const socket = io({\n   *   autoConnect: false\n   * });\n   *\n   * socket.connect();\n   */\n\n\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for {@link connect()}.\n   */\n\n\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * socket.send(\"hello\");\n   *\n   * // this is equivalent to\n   * socket.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n\n\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @example\n   * socket.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the server\n   * socket.emit(\"hello\", \"world\", (val) => {\n   *   // ...\n   * });\n   *\n   * @return self\n   */\n\n\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    args.unshift(ev);\n\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n\n      return this;\n    }\n\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false; // event ack callback\n\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n\n      this._registerAckCallback(id, ack);\n\n      packet.id = id;\n    }\n\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n    if (discardPacket) {} else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n\n    this.flags = {};\n    return this;\n  }\n  /**\n   * @private\n   */\n\n\n  _registerAckCallback(id, ack) {\n    var _this = this;\n\n    var _a;\n\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    } // @ts-ignore\n\n\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n\n    const fn = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      ack.apply(_this, args);\n    };\n\n    fn.withError = true;\n    this.acks[id] = fn;\n  }\n  /**\n   * Emits an event and waits for an acknowledgement\n   *\n   * @example\n   * // without timeout\n   * const response = await socket.emitWithAck(\"hello\", \"world\");\n   *\n   * // with a specific timeout\n   * try {\n   *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n   * } catch (err) {\n   *   // the server did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when the server acknowledges the event\n   */\n\n\n  emitWithAck(ev) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    return new Promise((resolve, reject) => {\n      const fn = (arg1, arg2) => {\n        return arg1 ? reject(arg1) : resolve(arg2);\n      };\n\n      fn.withError = true;\n      args.push(fn);\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * Add the packet to the queue.\n   * @param args\n   * @private\n   */\n\n\n  _addToQueue(args) {\n    var _this2 = this;\n\n    let ack;\n\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n\n    const packet = {\n      id: this._queueSeq++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push(function (err) {\n      if (packet !== _this2._queue[0]) {\n        // the packet has already been acknowledged\n        return;\n      }\n\n      const hasError = err !== null;\n\n      if (hasError) {\n        if (packet.tryCount > _this2._opts.retries) {\n          _this2._queue.shift();\n\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        _this2._queue.shift();\n\n        if (ack) {\n          for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            responseArgs[_key5 - 1] = arguments[_key5];\n          }\n\n          ack(null, ...responseArgs);\n        }\n      }\n\n      packet.pending = false;\n      return _this2._drainQueue();\n    });\n\n    this._queue.push(packet);\n\n    this._drainQueue();\n  }\n  /**\n   * Send the first packet of the queue, and wait for an acknowledgement from the server.\n   * @param force - whether to resend a packet that has not been acknowledged yet\n   *\n   * @private\n   */\n\n\n  _drainQueue() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!this.connected || this._queue.length === 0) {\n      return;\n    }\n\n    const packet = this._queue[0];\n\n    if (packet.pending && !force) {\n      return;\n    }\n\n    packet.pending = true;\n    packet.tryCount++;\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  packet(packet) {\n    packet.nsp = this.nsp;\n\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n\n\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  /**\n   * Sends a CONNECT packet to initiate the Socket.IO session.\n   *\n   * @param data\n   * @private\n   */\n\n\n  _sendConnectPacket(data) {\n    this.packet({\n      type: PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n\n\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @param description\n   * @private\n   */\n\n\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n\n    this._clearAcks();\n  }\n  /**\n   * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n   * the server.\n   *\n   * @private\n   */\n\n\n  _clearAcks() {\n    Object.keys(this.acks).forEach(id => {\n      const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n\n      if (!isBuffered) {\n        // note: handlers that do not accept an error as first argument are ignored here\n        const ack = this.acks[id];\n        delete this.acks[id];\n\n        if (ack.withError) {\n          ack.call(this, new Error(\"socket has been disconnected\"));\n        }\n      }\n    });\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n\n        break;\n\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message); // @ts-ignore\n\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    super.emit.apply(this, args);\n\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowledgement.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  onack(packet) {\n    const ack = this.acks[packet.id];\n\n    if (typeof ack !== \"function\") {\n      return;\n    }\n\n    delete this.acks[packet.id]; // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n\n    if (ack.withError) {\n      packet.data.unshift(null);\n    } // @ts-ignore\n\n\n    ack.apply(this, packet.data);\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n\n\n  onconnect(id, pid) {\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid; // defined only if connection state recovery is enabled\n\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n\n    this._drainQueue(true);\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n\n\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n\n\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n\n\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n   *\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   // console.log(reason); prints \"io client disconnect\"\n   * });\n   *\n   * socket.disconnect();\n   *\n   * @return self\n   */\n\n\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    } // remove socket from pool\n\n\n    this.destroy();\n\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n\n    return this;\n  }\n  /**\n   * Alias for {@link disconnect()}.\n   *\n   * @return self\n   */\n\n\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * socket.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @example\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n   *\n   * @returns self\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\n   *\n   * @example\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\n   *   if (err) {\n   *     // the server did not acknowledge the event in the given delay\n   *   }\n   * });\n   *\n   * @returns self\n   */\n\n\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @example\n   * socket.onAny((event, ...args) => {\n   *   console.log(`got ${event}`);\n   * });\n   *\n   * @param listener\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @example\n   * socket.prependAny((event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * }\n   *\n   * socket.onAny(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAny(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAny();\n   *\n   * @param listener\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.onAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n\n\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n    this._anyOutgoingListeners.push(listener);\n\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.prependAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n\n\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n    this._anyOutgoingListeners.unshift(listener);\n\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * }\n   *\n   * socket.onAnyOutgoing(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAnyOutgoing(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAnyOutgoing();\n   *\n   * @param [listener] - the catch-all listener (optional)\n   */\n\n\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n\n\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\n   * Notify the listeners for each packet sent\n   *\n   * @param packet\n   *\n   * @private\n   */\n\n\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/socket.io-client/build/esm/socket.js"],"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","fn","clearTimeoutFn","withError","emitWithAck","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","hasError","shift","responseArgs","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","_clearAcks","keys","forEach","isBuffered","some","String","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,EAAT,QAAmB,SAAnB;AACA,SAASC,OAAT,QAAyB,8BAAzB;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc;AAClCC,EAAAA,OAAO,EAAE,CADyB;AAElCC,EAAAA,aAAa,EAAE,CAFmB;AAGlCC,EAAAA,UAAU,EAAE,CAHsB;AAIlCC,EAAAA,aAAa,EAAE,CAJmB;AAKlC;AACAC,EAAAA,WAAW,EAAE,CANqB;AAOlCC,EAAAA,cAAc,EAAE;AAPkB,CAAd,CAAxB;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAN,SAAqBV,OAArB,CAA6B;AAChC;AACJ;AACA;AACIW,EAAAA,WAAW,CAACC,EAAD,EAAKC,GAAL,EAAUC,IAAV,EAAgB;AACvB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;;AACQ,SAAKC,aAAL,GAAqB,EAArB;AACA;AACR;AACA;;AACQ,SAAKC,UAAL,GAAkB,EAAlB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,MAAL,GAAc,EAAd;AACA;AACR;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,GAAL,GAAW,CAAX;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKX,EAAL,GAAUA,EAAV;AACA,SAAKC,GAAL,GAAWA,GAAX;;AACA,QAAIC,IAAI,IAAIA,IAAI,CAACU,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAYV,IAAI,CAACU,IAAjB;AACH;;AACD,SAAKC,KAAL,GAAavB,MAAM,CAACwB,MAAP,CAAc,EAAd,EAAkBZ,IAAlB,CAAb;AACA,QAAI,KAAKF,EAAL,CAAQe,YAAZ,EACI,KAAKC,IAAL;AACP;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,MAAZC,YAAY,GAAG;AACf,WAAO,CAAC,KAAKd,SAAb;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIe,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKC,IAAT,EACI;AACJ,UAAMnB,EAAE,GAAG,KAAKA,EAAhB;AACA,SAAKmB,IAAL,GAAY,CACRhC,EAAE,CAACa,EAAD,EAAK,MAAL,EAAa,KAAKoB,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAb,CADM,EAERlC,EAAE,CAACa,EAAD,EAAK,QAAL,EAAe,KAAKsB,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAf,CAFM,EAGRlC,EAAE,CAACa,EAAD,EAAK,OAAL,EAAc,KAAKuB,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAd,CAHM,EAIRlC,EAAE,CAACa,EAAD,EAAK,OAAL,EAAc,KAAKwB,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAd,CAJM,CAAZ;AAMH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,MAANI,MAAM,GAAG;AACT,WAAO,CAAC,CAAC,KAAKN,IAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3B,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKW,SAAT,EACI,OAAO,IAAP;AACJ,SAAKe,SAAL;AACA,QAAI,CAAC,KAAKlB,EAAL,CAAQ,eAAR,CAAL,EACI,KAAKA,EAAL,CAAQgB,IAAR,GALE,CAKc;;AACpB,QAAI,WAAW,KAAKhB,EAAL,CAAQ0B,WAAvB,EACI,KAAKN,MAAL;AACJ,WAAO,IAAP;AACH;AACD;AACJ;AACA;;;AACIJ,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKxB,OAAL,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACImC,EAAAA,IAAI,GAAU;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACVA,IAAAA,IAAI,CAACC,OAAL,CAAa,SAAb;AACA,SAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBH,IAAtB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,IAAI,CAACE,EAAD,EAAc;AACd,QAAI3C,eAAe,CAAC4C,cAAhB,CAA+BD,EAA/B,CAAJ,EAAwC;AACpC,YAAM,IAAIE,KAAJ,CAAU,MAAMF,EAAE,CAACG,QAAH,EAAN,GAAsB,4BAAhC,CAAN;AACH;;AAHa,uCAANP,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAIdA,IAAAA,IAAI,CAACC,OAAL,CAAaG,EAAb;;AACA,QAAI,KAAKnB,KAAL,CAAWuB,OAAX,IAAsB,CAAC,KAAKzB,KAAL,CAAW0B,SAAlC,IAA+C,CAAC,KAAK1B,KAAL,CAAW2B,QAA/D,EAAyE;AACrE,WAAKC,WAAL,CAAiBX,IAAjB;;AACA,aAAO,IAAP;AACH;;AACD,UAAMY,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAEvD,UAAU,CAACwD,KADN;AAEXC,MAAAA,IAAI,EAAEf;AAFK,KAAf;AAIAY,IAAAA,MAAM,CAACI,OAAP,GAAiB,EAAjB;AACAJ,IAAAA,MAAM,CAACI,OAAP,CAAeC,QAAf,GAA0B,KAAKlC,KAAL,CAAWkC,QAAX,KAAwB,KAAlD,CAdc,CAed;;AACA,QAAI,eAAe,OAAOjB,IAAI,CAACA,IAAI,CAACkB,MAAL,GAAc,CAAf,CAA9B,EAAiD;AAC7C,YAAMC,EAAE,GAAG,KAAKtC,GAAL,EAAX;AACA,YAAMuC,GAAG,GAAGpB,IAAI,CAACqB,GAAL,EAAZ;;AACA,WAAKC,oBAAL,CAA0BH,EAA1B,EAA8BC,GAA9B;;AACAR,MAAAA,MAAM,CAACO,EAAP,GAAYA,EAAZ;AACH;;AACD,UAAMI,mBAAmB,GAAG,KAAKnD,EAAL,CAAQoD,MAAR,IACxB,KAAKpD,EAAL,CAAQoD,MAAR,CAAeC,SADS,IAExB,KAAKrD,EAAL,CAAQoD,MAAR,CAAeC,SAAf,CAAyBC,QAF7B;AAGA,UAAMC,aAAa,GAAG,KAAK5C,KAAL,CAAW2B,QAAX,KAAwB,CAACa,mBAAD,IAAwB,CAAC,KAAKhD,SAAtD,CAAtB;;AACA,QAAIoD,aAAJ,EAAmB,CAClB,CADD,MAEK,IAAI,KAAKpD,SAAT,EAAoB;AACrB,WAAKqD,uBAAL,CAA6BhB,MAA7B;AACA,WAAKA,MAAL,CAAYA,MAAZ;AACH,KAHI,MAIA;AACD,WAAKlC,UAAL,CAAgBmD,IAAhB,CAAqBjB,MAArB;AACH;;AACD,SAAK7B,KAAL,GAAa,EAAb;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;;;AACIuC,EAAAA,oBAAoB,CAACH,EAAD,EAAKC,GAAL,EAAU;AAAA;;AAC1B,QAAIU,EAAJ;;AACA,UAAMC,OAAO,GAAG,CAACD,EAAE,GAAG,KAAK/C,KAAL,CAAWgD,OAAjB,MAA8B,IAA9B,IAAsCD,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2D,KAAK7C,KAAL,CAAW+C,UAAtF;;AACA,QAAID,OAAO,KAAKE,SAAhB,EAA2B;AACvB,WAAKnD,IAAL,CAAUqC,EAAV,IAAgBC,GAAhB;AACA;AACH,KANyB,CAO1B;;;AACA,UAAMc,KAAK,GAAG,KAAK9D,EAAL,CAAQ+D,YAAR,CAAqB,MAAM;AACrC,aAAO,KAAKrD,IAAL,CAAUqC,EAAV,CAAP;;AACA,WAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1D,UAAL,CAAgBwC,MAApC,EAA4CkB,CAAC,EAA7C,EAAiD;AAC7C,YAAI,KAAK1D,UAAL,CAAgB0D,CAAhB,EAAmBjB,EAAnB,KAA0BA,EAA9B,EAAkC;AAC9B,eAAKzC,UAAL,CAAgB2D,MAAhB,CAAuBD,CAAvB,EAA0B,CAA1B;AACH;AACJ;;AACDhB,MAAAA,GAAG,CAACkB,IAAJ,CAAS,IAAT,EAAe,IAAIhC,KAAJ,CAAU,yBAAV,CAAf;AACH,KARa,EAQXyB,OARW,CAAd;;AASA,UAAMQ,EAAE,GAAG,YAAa;AACpB;AACA,MAAA,KAAI,CAACnE,EAAL,CAAQoE,cAAR,CAAuBN,KAAvB;;AAFoB,yCAATlC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAGpBoB,MAAAA,GAAG,CAACjB,KAAJ,CAAU,KAAV,EAAgBH,IAAhB;AACH,KAJD;;AAKAuC,IAAAA,EAAE,CAACE,SAAH,GAAe,IAAf;AACA,SAAK3D,IAAL,CAAUqC,EAAV,IAAgBoB,EAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,WAAW,CAACtC,EAAD,EAAc;AAAA,uCAANJ,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACrB,WAAO,IAAI2C,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMN,EAAE,GAAG,CAACO,IAAD,EAAOC,IAAP,KAAgB;AACvB,eAAOD,IAAI,GAAGD,MAAM,CAACC,IAAD,CAAT,GAAkBF,OAAO,CAACG,IAAD,CAApC;AACH,OAFD;;AAGAR,MAAAA,EAAE,CAACE,SAAH,GAAe,IAAf;AACAzC,MAAAA,IAAI,CAAC6B,IAAL,CAAUU,EAAV;AACA,WAAKrC,IAAL,CAAUE,EAAV,EAAc,GAAGJ,IAAjB;AACH,KAPM,CAAP;AAQH;AACD;AACJ;AACA;AACA;AACA;;;AACIW,EAAAA,WAAW,CAACX,IAAD,EAAO;AAAA;;AACd,QAAIoB,GAAJ;;AACA,QAAI,OAAOpB,IAAI,CAACA,IAAI,CAACkB,MAAL,GAAc,CAAf,CAAX,KAAiC,UAArC,EAAiD;AAC7CE,MAAAA,GAAG,GAAGpB,IAAI,CAACqB,GAAL,EAAN;AACH;;AACD,UAAMT,MAAM,GAAG;AACXO,MAAAA,EAAE,EAAE,KAAKvC,SAAL,EADO;AAEXoE,MAAAA,QAAQ,EAAE,CAFC;AAGXC,MAAAA,OAAO,EAAE,KAHE;AAIXjD,MAAAA,IAJW;AAKXjB,MAAAA,KAAK,EAAErB,MAAM,CAACwB,MAAP,CAAc;AAAEuB,QAAAA,SAAS,EAAE;AAAb,OAAd,EAAmC,KAAK1B,KAAxC;AALI,KAAf;AAOAiB,IAAAA,IAAI,CAAC6B,IAAL,CAAU,UAACqB,GAAD,EAA0B;AAChC,UAAItC,MAAM,KAAK,MAAI,CAACjC,MAAL,CAAY,CAAZ,CAAf,EAA+B;AAC3B;AACA;AACH;;AACD,YAAMwE,QAAQ,GAAGD,GAAG,KAAK,IAAzB;;AACA,UAAIC,QAAJ,EAAc;AACV,YAAIvC,MAAM,CAACoC,QAAP,GAAkB,MAAI,CAAC/D,KAAL,CAAWuB,OAAjC,EAA0C;AACtC,UAAA,MAAI,CAAC7B,MAAL,CAAYyE,KAAZ;;AACA,cAAIhC,GAAJ,EAAS;AACLA,YAAAA,GAAG,CAAC8B,GAAD,CAAH;AACH;AACJ;AACJ,OAPD,MAQK;AACD,QAAA,MAAI,CAACvE,MAAL,CAAYyE,KAAZ;;AACA,YAAIhC,GAAJ,EAAS;AAAA,6CAhBEiC,YAgBF;AAhBEA,YAAAA,YAgBF;AAAA;;AACLjC,UAAAA,GAAG,CAAC,IAAD,EAAO,GAAGiC,YAAV,CAAH;AACH;AACJ;;AACDzC,MAAAA,MAAM,CAACqC,OAAP,GAAiB,KAAjB;AACA,aAAO,MAAI,CAACK,WAAL,EAAP;AACH,KAtBD;;AAuBA,SAAK3E,MAAL,CAAYkD,IAAZ,CAAiBjB,MAAjB;;AACA,SAAK0C,WAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,WAAW,GAAgB;AAAA,QAAfC,KAAe,uEAAP,KAAO;;AACvB,QAAI,CAAC,KAAKhF,SAAN,IAAmB,KAAKI,MAAL,CAAYuC,MAAZ,KAAuB,CAA9C,EAAiD;AAC7C;AACH;;AACD,UAAMN,MAAM,GAAG,KAAKjC,MAAL,CAAY,CAAZ,CAAf;;AACA,QAAIiC,MAAM,CAACqC,OAAP,IAAkB,CAACM,KAAvB,EAA8B;AAC1B;AACH;;AACD3C,IAAAA,MAAM,CAACqC,OAAP,GAAiB,IAAjB;AACArC,IAAAA,MAAM,CAACoC,QAAP;AACA,SAAKjE,KAAL,GAAa6B,MAAM,CAAC7B,KAApB;AACA,SAAKmB,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBS,MAAM,CAACZ,IAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIY,EAAAA,MAAM,CAACA,MAAD,EAAS;AACXA,IAAAA,MAAM,CAACvC,GAAP,GAAa,KAAKA,GAAlB;;AACA,SAAKD,EAAL,CAAQoF,OAAR,CAAgB5C,MAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIpB,EAAAA,MAAM,GAAG;AACL,QAAI,OAAO,KAAKR,IAAZ,IAAoB,UAAxB,EAAoC;AAChC,WAAKA,IAAL,CAAW+B,IAAD,IAAU;AAChB,aAAK0C,kBAAL,CAAwB1C,IAAxB;AACH,OAFD;AAGH,KAJD,MAKK;AACD,WAAK0C,kBAAL,CAAwB,KAAKzE,IAA7B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIyE,EAAAA,kBAAkB,CAAC1C,IAAD,EAAO;AACrB,SAAKH,MAAL,CAAY;AACRC,MAAAA,IAAI,EAAEvD,UAAU,CAACoG,OADT;AAER3C,MAAAA,IAAI,EAAE,KAAK4C,IAAL,GACAjG,MAAM,CAACwB,MAAP,CAAc;AAAE0E,QAAAA,GAAG,EAAE,KAAKD,IAAZ;AAAkBE,QAAAA,MAAM,EAAE,KAAKC;AAA/B,OAAd,EAA4D/C,IAA5D,CADA,GAEAA;AAJE,KAAZ;AAMH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIpB,EAAAA,OAAO,CAACuD,GAAD,EAAM;AACT,QAAI,CAAC,KAAK3E,SAAV,EAAqB;AACjB,WAAKwF,YAAL,CAAkB,eAAlB,EAAmCb,GAAnC;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACItD,EAAAA,OAAO,CAACoE,MAAD,EAASC,WAAT,EAAsB;AACzB,SAAK1F,SAAL,GAAiB,KAAjB;AACA,WAAO,KAAK4C,EAAZ;AACA,SAAK4C,YAAL,CAAkB,YAAlB,EAAgCC,MAAhC,EAAwCC,WAAxC;;AACA,SAAKC,UAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,UAAU,GAAG;AACTxG,IAAAA,MAAM,CAACyG,IAAP,CAAY,KAAKrF,IAAjB,EAAuBsF,OAAvB,CAAgCjD,EAAD,IAAQ;AACnC,YAAMkD,UAAU,GAAG,KAAK3F,UAAL,CAAgB4F,IAAhB,CAAsB1D,MAAD,IAAY2D,MAAM,CAAC3D,MAAM,CAACO,EAAR,CAAN,KAAsBA,EAAvD,CAAnB;;AACA,UAAI,CAACkD,UAAL,EAAiB;AACb;AACA,cAAMjD,GAAG,GAAG,KAAKtC,IAAL,CAAUqC,EAAV,CAAZ;AACA,eAAO,KAAKrC,IAAL,CAAUqC,EAAV,CAAP;;AACA,YAAIC,GAAG,CAACqB,SAAR,EAAmB;AACfrB,UAAAA,GAAG,CAACkB,IAAJ,CAAS,IAAT,EAAe,IAAIhC,KAAJ,CAAU,8BAAV,CAAf;AACH;AACJ;AACJ,KAVD;AAWH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIZ,EAAAA,QAAQ,CAACkB,MAAD,EAAS;AACb,UAAM4D,aAAa,GAAG5D,MAAM,CAACvC,GAAP,KAAe,KAAKA,GAA1C;AACA,QAAI,CAACmG,aAAL,EACI;;AACJ,YAAQ5D,MAAM,CAACC,IAAf;AACI,WAAKvD,UAAU,CAACoG,OAAhB;AACI,YAAI9C,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACG,IAAP,CAAY0D,GAA/B,EAAoC;AAChC,eAAKC,SAAL,CAAe9D,MAAM,CAACG,IAAP,CAAY0D,GAA3B,EAAgC7D,MAAM,CAACG,IAAP,CAAY6C,GAA5C;AACH,SAFD,MAGK;AACD,eAAKG,YAAL,CAAkB,eAAlB,EAAmC,IAAIzD,KAAJ,CAAU,2LAAV,CAAnC;AACH;;AACD;;AACJ,WAAKhD,UAAU,CAACwD,KAAhB;AACA,WAAKxD,UAAU,CAACqH,YAAhB;AACI,aAAKC,OAAL,CAAahE,MAAb;AACA;;AACJ,WAAKtD,UAAU,CAACuH,GAAhB;AACA,WAAKvH,UAAU,CAACwH,UAAhB;AACI,aAAKC,KAAL,CAAWnE,MAAX;AACA;;AACJ,WAAKtD,UAAU,CAAC0H,UAAhB;AACI,aAAKC,YAAL;AACA;;AACJ,WAAK3H,UAAU,CAAC4H,aAAhB;AACI,aAAKC,OAAL;AACA,cAAMjC,GAAG,GAAG,IAAI5C,KAAJ,CAAUM,MAAM,CAACG,IAAP,CAAYqE,OAAtB,CAAZ,CAFJ,CAGI;;AACAlC,QAAAA,GAAG,CAACnC,IAAJ,GAAWH,MAAM,CAACG,IAAP,CAAYA,IAAvB;AACA,aAAKgD,YAAL,CAAkB,eAAlB,EAAmCb,GAAnC;AACA;AA1BR;AA4BH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI0B,EAAAA,OAAO,CAAChE,MAAD,EAAS;AACZ,UAAMZ,IAAI,GAAGY,MAAM,CAACG,IAAP,IAAe,EAA5B;;AACA,QAAI,QAAQH,MAAM,CAACO,EAAnB,EAAuB;AACnBnB,MAAAA,IAAI,CAAC6B,IAAL,CAAU,KAAKT,GAAL,CAASR,MAAM,CAACO,EAAhB,CAAV;AACH;;AACD,QAAI,KAAK5C,SAAT,EAAoB;AAChB,WAAK8G,SAAL,CAAerF,IAAf;AACH,KAFD,MAGK;AACD,WAAKvB,aAAL,CAAmBoD,IAAnB,CAAwBnE,MAAM,CAACC,MAAP,CAAcqC,IAAd,CAAxB;AACH;AACJ;;AACDqF,EAAAA,SAAS,CAACrF,IAAD,EAAO;AACZ,QAAI,KAAKsF,aAAL,IAAsB,KAAKA,aAAL,CAAmBpE,MAA7C,EAAqD;AACjD,YAAMqE,SAAS,GAAG,KAAKD,aAAL,CAAmBE,KAAnB,EAAlB;;AACA,WAAK,MAAMC,QAAX,IAAuBF,SAAvB,EAAkC;AAC9BE,QAAAA,QAAQ,CAACtF,KAAT,CAAe,IAAf,EAAqBH,IAArB;AACH;AACJ;;AACD,UAAME,IAAN,CAAWC,KAAX,CAAiB,IAAjB,EAAuBH,IAAvB;;AACA,QAAI,KAAK2D,IAAL,IAAa3D,IAAI,CAACkB,MAAlB,IAA4B,OAAOlB,IAAI,CAACA,IAAI,CAACkB,MAAL,GAAc,CAAf,CAAX,KAAiC,QAAjE,EAA2E;AACvE,WAAK4C,WAAL,GAAmB9D,IAAI,CAACA,IAAI,CAACkB,MAAL,GAAc,CAAf,CAAvB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,GAAG,CAACD,EAAD,EAAK;AACJ,UAAMuE,IAAI,GAAG,IAAb;AACA,QAAIC,IAAI,GAAG,KAAX;AACA,WAAO,YAAmB;AACtB;AACA,UAAIA,IAAJ,EACI;AACJA,MAAAA,IAAI,GAAG,IAAP;;AAJsB,yCAAN3F,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAKtB0F,MAAAA,IAAI,CAAC9E,MAAL,CAAY;AACRC,QAAAA,IAAI,EAAEvD,UAAU,CAACuH,GADT;AAER1D,QAAAA,EAAE,EAAEA,EAFI;AAGRJ,QAAAA,IAAI,EAAEf;AAHE,OAAZ;AAKH,KAVD;AAWH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI+E,EAAAA,KAAK,CAACnE,MAAD,EAAS;AACV,UAAMQ,GAAG,GAAG,KAAKtC,IAAL,CAAU8B,MAAM,CAACO,EAAjB,CAAZ;;AACA,QAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AAC3B;AACH;;AACD,WAAO,KAAKtC,IAAL,CAAU8B,MAAM,CAACO,EAAjB,CAAP,CALU,CAMV;;AACA,QAAIC,GAAG,CAACqB,SAAR,EAAmB;AACf7B,MAAAA,MAAM,CAACG,IAAP,CAAYd,OAAZ,CAAoB,IAApB;AACH,KATS,CAUV;;;AACAmB,IAAAA,GAAG,CAACjB,KAAJ,CAAU,IAAV,EAAgBS,MAAM,CAACG,IAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI2D,EAAAA,SAAS,CAACvD,EAAD,EAAKyC,GAAL,EAAU;AACf,SAAKzC,EAAL,GAAUA,EAAV;AACA,SAAK3C,SAAL,GAAiBoF,GAAG,IAAI,KAAKD,IAAL,KAAcC,GAAtC;AACA,SAAKD,IAAL,GAAYC,GAAZ,CAHe,CAGE;;AACjB,SAAKrF,SAAL,GAAiB,IAAjB;AACA,SAAKqH,YAAL;AACA,SAAK7B,YAAL,CAAkB,SAAlB;;AACA,SAAKT,WAAL,CAAiB,IAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIsC,EAAAA,YAAY,GAAG;AACX,SAAKnH,aAAL,CAAmB2F,OAAnB,CAA4BpE,IAAD,IAAU,KAAKqF,SAAL,CAAerF,IAAf,CAArC;AACA,SAAKvB,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,CAAgB0F,OAAhB,CAAyBxD,MAAD,IAAY;AAChC,WAAKgB,uBAAL,CAA6BhB,MAA7B;AACA,WAAKA,MAAL,CAAYA,MAAZ;AACH,KAHD;AAIA,SAAKlC,UAAL,GAAkB,EAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIuG,EAAAA,YAAY,GAAG;AACX,SAAKE,OAAL;AACA,SAAKvF,OAAL,CAAa,sBAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIuF,EAAAA,OAAO,GAAG;AACN,QAAI,KAAK5F,IAAT,EAAe;AACX;AACA,WAAKA,IAAL,CAAU6E,OAAV,CAAmByB,UAAD,IAAgBA,UAAU,EAA5C;AACA,WAAKtG,IAAL,GAAY0C,SAAZ;AACH;;AACD,SAAK7D,EAAL,CAAQ,UAAR,EAAoB,IAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKS,SAAT,EAAoB;AAChB,WAAKqC,MAAL,CAAY;AAAEC,QAAAA,IAAI,EAAEvD,UAAU,CAAC0H;AAAnB,OAAZ;AACH,KAHQ,CAIT;;;AACA,SAAKG,OAAL;;AACA,QAAI,KAAK5G,SAAT,EAAoB;AAChB;AACA,WAAKqB,OAAL,CAAa,sBAAb;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIkG,EAAAA,KAAK,GAAG;AACJ,WAAO,KAAKhI,UAAL,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACImD,EAAAA,QAAQ,CAACA,QAAD,EAAW;AACf,SAAKlC,KAAL,CAAWkC,QAAX,GAAsBA,QAAtB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,MAARP,QAAQ,GAAG;AACX,SAAK3B,KAAL,CAAW2B,QAAX,GAAsB,IAAtB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIqB,EAAAA,OAAO,CAACA,OAAD,EAAU;AACb,SAAKhD,KAAL,CAAWgD,OAAX,GAAqBA,OAArB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIgE,EAAAA,KAAK,CAACN,QAAD,EAAW;AACZ,SAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;AACA,SAAKA,aAAL,CAAmBzD,IAAnB,CAAwB4D,QAAxB;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,UAAU,CAACP,QAAD,EAAW;AACjB,SAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;AACA,SAAKA,aAAL,CAAmBrF,OAAnB,CAA2BwF,QAA3B;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,MAAM,CAACR,QAAD,EAAW;AACb,QAAI,CAAC,KAAKH,aAAV,EAAyB;AACrB,aAAO,IAAP;AACH;;AACD,QAAIG,QAAJ,EAAc;AACV,YAAMF,SAAS,GAAG,KAAKD,aAAvB;;AACA,WAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,SAAS,CAACrE,MAA9B,EAAsCkB,CAAC,EAAvC,EAA2C;AACvC,YAAIqD,QAAQ,KAAKF,SAAS,CAACnD,CAAD,CAA1B,EAA+B;AAC3BmD,UAAAA,SAAS,CAAClD,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;AACA,iBAAO,IAAP;AACH;AACJ;AACJ,KARD,MASK;AACD,WAAKkD,aAAL,GAAqB,EAArB;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIY,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKZ,aAAL,IAAsB,EAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIa,EAAAA,aAAa,CAACV,QAAD,EAAW;AACpB,SAAKW,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,EAA3D;;AACA,SAAKA,qBAAL,CAA2BvE,IAA3B,CAAgC4D,QAAhC;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIY,EAAAA,kBAAkB,CAACZ,QAAD,EAAW;AACzB,SAAKW,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,EAA3D;;AACA,SAAKA,qBAAL,CAA2BnG,OAA3B,CAAmCwF,QAAnC;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIa,EAAAA,cAAc,CAACb,QAAD,EAAW;AACrB,QAAI,CAAC,KAAKW,qBAAV,EAAiC;AAC7B,aAAO,IAAP;AACH;;AACD,QAAIX,QAAJ,EAAc;AACV,YAAMF,SAAS,GAAG,KAAKa,qBAAvB;;AACA,WAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,SAAS,CAACrE,MAA9B,EAAsCkB,CAAC,EAAvC,EAA2C;AACvC,YAAIqD,QAAQ,KAAKF,SAAS,CAACnD,CAAD,CAA1B,EAA+B;AAC3BmD,UAAAA,SAAS,CAAClD,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;AACA,iBAAO,IAAP;AACH;AACJ;AACJ,KARD,MASK;AACD,WAAKgE,qBAAL,GAA6B,EAA7B;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIG,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAKH,qBAAL,IAA8B,EAArC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIxE,EAAAA,uBAAuB,CAAChB,MAAD,EAAS;AAC5B,QAAI,KAAKwF,qBAAL,IAA8B,KAAKA,qBAAL,CAA2BlF,MAA7D,EAAqE;AACjE,YAAMqE,SAAS,GAAG,KAAKa,qBAAL,CAA2BZ,KAA3B,EAAlB;;AACA,WAAK,MAAMC,QAAX,IAAuBF,SAAvB,EAAkC;AAC9BE,QAAAA,QAAQ,CAACtF,KAAT,CAAe,IAAf,EAAqBS,MAAM,CAACG,IAA5B;AACH;AACJ;AACJ;;AAx0B+B","sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}