{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\ASUS\\\\Downloads\\\\mini-project-master\\\\mini-project-master\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import axios from\"axios\";import{LANGUAGE_VERSIONS}from\"./constants\";var API=axios.create({baseURL:\"https://emkc.org/api/v2/piston\"});export var executeCode=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(language,sourceCode){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return API.post(\"/execute\",{language:language,version:LANGUAGE_VERSIONS[language],files:[{content:sourceCode}]});case 2:response=_context.sent;return _context.abrupt(\"return\",response);case 4:case\"end\":return _context.stop();}}},_callee);}));return function executeCode(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/src/api.js"],"names":["axios","LANGUAGE_VERSIONS","API","create","baseURL","executeCode","language","sourceCode","post","version","files","content","response"],"mappings":"uTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,iBAAT,KAAkC,aAAlC,CAEA,GAAMC,CAAAA,GAAG,CAAGF,KAAK,CAACG,MAAN,CAAa,CACvBC,OAAO,CAAE,gCADc,CAAb,CAAZ,CAIA,MAAO,IAAMC,CAAAA,WAAW,0FAAG,iBAAOC,QAAP,CAAiBC,UAAjB,qJACFL,CAAAA,GAAG,CAACM,IAAJ,CAAS,UAAT,CAAqB,CAC1CF,QAAQ,CAAEA,QADgC,CAE1CG,OAAO,CAAER,iBAAiB,CAACK,QAAD,CAFgB,CAG1CI,KAAK,CAAE,CACL,CACEC,OAAO,CAAEJ,UADX,CADK,CAHmC,CAArB,CADE,QACnBK,QADmB,+CAUlBA,QAVkB,wDAAH,kBAAXP,CAAAA,WAAW,gDAAjB","sourcesContent":["import axios from \"axios\";\nimport { LANGUAGE_VERSIONS } from \"./constants\";\n\nconst API = axios.create({\n  baseURL: \"https://emkc.org/api/v2/piston\",\n});\n\nexport const executeCode = async (language, sourceCode) => {\n  const response = await API.post(\"/execute\", {\n    language: language,\n    version: LANGUAGE_VERSIONS[language],\n    files: [\n      {\n        content: sourceCode,\n      },\n    ],\n  });\n  return response;\n};"]},"metadata":{},"sourceType":"module"}