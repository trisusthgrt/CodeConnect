{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\mini-project-master\\\\mini-project-master\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useRef } from 'react';\n// import Codemirror from 'codemirror';\n// import 'codemirror/lib/codemirror.css';\n// import 'codemirror/theme/dracula.css';\n// import 'codemirror/mode/javascript/javascript';\n// import 'codemirror/addon/edit/closetag';\n// import 'codemirror/addon/edit/closebrackets';\n// import ACTIONS from '../Actions';\n// const Editor = ({ socketRef, roomId, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     useEffect(() => {\n//         async function init() {\n//             editorRef.current = Codemirror.fromTextArea(\n//                 document.getElementById('realtimeEditor'),\n//                 {\n//                     mode: { name: 'javascript', json: true },\n//                     theme: 'dracula',\n//                     autoCloseTags: true,\n//                     autoCloseBrackets: true,\n//                     lineNumbers: true,\n//                 }\n//             );\n//             editorRef.current.on('change', (instance, changes) => {\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code);\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomId,\n//                         code,\n//                     });\n//                 }\n//             });\n//         }\n//         init();\n//     }, []);\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.setValue(code);\n//                 }\n//             });\n//         }\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE);\n//         };\n//     }, [socketRef.current]);\n//     return <textarea id=\"realtimeEditor\"></textarea>;\n// };\n// export default Editor;\nimport React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = _ref => {\n  _s();\n\n  let {\n    socketRef,\n    roomId,\n    onCodeChange\n  } = _ref;\n  const editorRef = useRef(null);\n  useEffect(() => {\n    async function init() {\n      editorRef.current = Codemirror.fromTextArea(document.getElementById('realtimeEditor'), {\n        mode: {\n          name: 'javascript',\n          json: true\n        },\n        theme: 'dracula',\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true\n      });\n      editorRef.current.on('change', (instance, changes) => {\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n\n        if (origin !== 'setValue') {\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n            roomId,\n            code\n          });\n        }\n      });\n    }\n\n    init();\n  }, [roomId]);\n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on(ACTIONS.CODE_CHANGE, _ref2 => {\n        let {\n          code\n        } = _ref2;\n\n        if (code !== null) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n\n    return () => {\n      socketRef.current.off(ACTIONS.CODE_CHANGE);\n    };\n  }, [socketRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: \"realtimeEditor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Editor, \"ueqoO+5gVAT6IRBF08iN84bYr2g=\");\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/src/components/Editor.js"],"names":["React","useEffect","useRef","Codemirror","ACTIONS","Editor","socketRef","roomId","onCodeChange","editorRef","init","current","fromTextArea","document","getElementById","mode","name","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","on","instance","changes","origin","code","getValue","emit","CODE_CHANGE","setValue","off"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AACA,OAAO,uCAAP;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAMC,MAAM,GAAG,QAAyC;AAAA;;AAAA,MAAxC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,GAAwC;AACpD,QAAMC,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,IAAf,GAAsB;AAClBD,MAAAA,SAAS,CAACE,OAAV,GAAoBR,UAAU,CAACS,YAAX,CAChBC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CADgB,EAEhB;AACIC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,IAAI,EAAE;AAA5B,SADV;AAEIC,QAAAA,KAAK,EAAE,SAFX;AAGIC,QAAAA,aAAa,EAAE,IAHnB;AAIIC,QAAAA,iBAAiB,EAAE,IAJvB;AAKIC,QAAAA,WAAW,EAAE;AALjB,OAFgB,CAApB;AAWAZ,MAAAA,SAAS,CAACE,OAAV,CAAkBW,EAAlB,CAAqB,QAArB,EAA+B,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAClD,cAAM;AAAEC,UAAAA;AAAF,YAAaD,OAAnB;AACA,cAAME,IAAI,GAAGH,QAAQ,CAACI,QAAT,EAAb;AACAnB,QAAAA,YAAY,CAACkB,IAAD,CAAZ;;AACA,YAAID,MAAM,KAAK,UAAf,EAA2B;AACvBnB,UAAAA,SAAS,CAACK,OAAV,CAAkBiB,IAAlB,CAAuBxB,OAAO,CAACyB,WAA/B,EAA4C;AACxCtB,YAAAA,MADwC;AAExCmB,YAAAA;AAFwC,WAA5C;AAIH;AACJ,OAVD;AAWH;;AACDhB,IAAAA,IAAI;AACP,GA1BQ,EA0BN,CAACH,MAAD,CA1BM,CAAT;AA4BAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,SAAS,CAACK,OAAd,EAAuB;AACnBL,MAAAA,SAAS,CAACK,OAAV,CAAkBW,EAAlB,CAAqBlB,OAAO,CAACyB,WAA7B,EAA0C,SAAc;AAAA,YAAb;AAAEH,UAAAA;AAAF,SAAa;;AACpD,YAAIA,IAAI,KAAK,IAAb,EAAmB;AACfjB,UAAAA,SAAS,CAACE,OAAV,CAAkBmB,QAAlB,CAA2BJ,IAA3B;AACH;AACJ,OAJD;AAKH;;AAED,WAAO,MAAM;AACTpB,MAAAA,SAAS,CAACK,OAAV,CAAkBoB,GAAlB,CAAsB3B,OAAO,CAACyB,WAA9B;AACH,KAFD;AAGH,GAZQ,EAYN,CAACvB,SAAS,CAACK,OAAX,CAZM,CAAT;AAcA,sBAAO;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA9CD;;GAAMN,M;;KAAAA,M;AAgDN,eAAeA,MAAf","sourcesContent":["// import React, { useEffect, useRef } from 'react';\n// import Codemirror from 'codemirror';\n// import 'codemirror/lib/codemirror.css';\n// import 'codemirror/theme/dracula.css';\n// import 'codemirror/mode/javascript/javascript';\n// import 'codemirror/addon/edit/closetag';\n// import 'codemirror/addon/edit/closebrackets';\n// import ACTIONS from '../Actions';\n\n// const Editor = ({ socketRef, roomId, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     useEffect(() => {\n//         async function init() {\n//             editorRef.current = Codemirror.fromTextArea(\n//                 document.getElementById('realtimeEditor'),\n//                 {\n//                     mode: { name: 'javascript', json: true },\n//                     theme: 'dracula',\n//                     autoCloseTags: true,\n//                     autoCloseBrackets: true,\n//                     lineNumbers: true,\n//                 }\n//             );\n\n//             editorRef.current.on('change', (instance, changes) => {\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code);\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomId,\n//                         code,\n//                     });\n//                 }\n//             });\n//         }\n//         init();\n//     }, []);\n\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.setValue(code);\n//                 }\n//             });\n//         }\n\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE);\n//         };\n//     }, [socketRef.current]);\n\n//     return <textarea id=\"realtimeEditor\"></textarea>;\n// };\n\n// export default Editor;\n\n\nimport React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n\n    useEffect(() => {\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: { name: 'javascript', json: true },\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, [roomId]);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n"]},"metadata":{},"sourceType":"module"}