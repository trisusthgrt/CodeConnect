{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\mini-project-master\\\\mini-project-master\\\\src\\\\pages\\\\EditorPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { executeCode } from '../api';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorPage = () => {\n  _s();\n\n  const [language, setLanguage] = useState('javascript');\n  const [output, setOutput] = useState('');\n  const socketRef = useRef(null);\n  const codeRef = useRef(null);\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n\n  const runCode = async () => {\n    const code = codeRef.current;\n\n    try {\n      const response = await executeCode(language, code);\n\n      if (response.data && response.data.run) {\n        const {\n          stdout,\n          stderr\n        } = response.data.run;\n        setOutput(stdout ? stdout : stderr);\n        console.log('Output:', stdout ? stdout : stderr);\n      } else {\n        console.error('Unexpected API response:', response);\n      }\n    } catch (error) {\n      console.error('Error running code:', error);\n    }\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleErrors(err));\n      socketRef.current.on('connect_failed', err => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log('socket error', e);\n        toast.error('Socket connection failed, try again later.');\n        reactNavigator('/');\n      }\n\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      }); // Listening for joined event\n\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n\n        setClients(clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      }); // Listening for disconnected\n\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED);\n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []);\n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success('Room ID has been copied to your clipboard');\n    } catch (err) {\n      toast.error('Could not copy the Room ID');\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator('/');\n  }\n\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: language,\n        onChange: e => setLanguage(e.target.value),\n        style: {\n          padding: '10px',\n          fontSize: '16px',\n          border: 'none',\n          borderRadius: '5px',\n          boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n          outline: 'none',\n          margin: '10px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"javascript\",\n          children: \"JavaScript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"typescript\",\n          children: \"TypeScript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"python\",\n          children: \"Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"csharp\",\n          children: \"C#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: runCode,\n        children: \"RUN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editorWrap\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          socketRef: socketRef,\n          roomId: roomId,\n          onCodeChange: code => {\n            codeRef.current = code;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outputWrap\",\n        style: {\n          backgroundColor: '#000',\n          padding: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          style: {\n            color: '#4aee88',\n            textDecoration: 'none'\n          },\n          children: output || 'No output'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditorPage, \"w09TiGrRqkkY7XzPLspGi+hdFG4=\", false, function () {\n  return [useLocation, useParams, useNavigate];\n});\n\n_c = EditorPage;\nexport default EditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/mini-project-master/mini-project-master/src/pages/EditorPage.js"],"names":["React","useState","useRef","useEffect","toast","ACTIONS","Client","Editor","initSocket","executeCode","useLocation","useNavigate","Navigate","useParams","EditorPage","language","setLanguage","output","setOutput","socketRef","codeRef","location","roomId","reactNavigator","clients","setClients","runCode","code","current","response","data","run","stdout","stderr","console","log","error","init","on","err","handleErrors","e","emit","JOIN","username","state","JOINED","socketId","success","SYNC_CODE","DISCONNECTED","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","map","target","value","padding","fontSize","border","borderRadius","boxShadow","outline","margin","backgroundColor","color","textDecoration"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { executeCode } from '../api';\nimport {\n    useLocation,\n    useNavigate,\n    Navigate,\n    useParams,\n} from 'react-router-dom';\n\nconst EditorPage = () => {\n    const [language, setLanguage] = useState('javascript');\n    const [output, setOutput] = useState('');\n\n\n    const socketRef = useRef(null);\n    const codeRef = useRef(null);\n    const location = useLocation();\n    const { roomId } = useParams();\n    const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n\n\n    const runCode = async () => {\n        const code = codeRef.current;\n        try {\n            const response = await executeCode(language, code);\n            if (response.data && response.data.run) {\n                const { stdout, stderr } = response.data.run;\n                setOutput(stdout ? stdout : stderr);\n                console.log('Output:', stdout ? stdout : stderr);\n            } else {\n                console.error('Unexpected API response:', response);\n            }\n        } catch (error) {\n            console.error('Error running code:', error);\n        }\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n            function handleErrors(e) {\n                console.log('socket error', e);\n                toast.error('Socket connection failed, try again later.');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            // Listening for joined event\n            socketRef.current.on(\n                ACTIONS.JOINED,\n                ({ clients, username, socketId }) => {\n                    if (username !== location.state?.username) {\n                        toast.success(`${username} joined the room.`);\n                        console.log(`${username} joined`);\n                    }\n                    setClients(clients);\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                        code: codeRef.current,\n                        socketId,\n                    });\n                }\n            );\n\n            // Listening for disconnected\n            socketRef.current.on(\n                ACTIONS.DISCONNECTED,\n                ({ socketId, username }) => {\n                    toast.success(`${username} left the room.`);\n                    setClients((prev) => {\n                        return prev.filter(\n                            (client) => client.socketId !== socketId\n                        );\n                    });\n                }\n            );\n        };\n        init();\n        return () => {\n            socketRef.current.disconnect();\n            socketRef.current.off(ACTIONS.JOINED);\n            socketRef.current.off(ACTIONS.DISCONNECTED);\n        };\n    }, []);\n\n    async function copyRoomId() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success('Room ID has been copied to your clipboard');\n        } catch (err) {\n            toast.error('Could not copy the Room ID');\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n\n    if (!location.state) {\n        return <Navigate to=\"/\" />;\n    }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <select value={language} onChange={(e) => setLanguage(e.target.value)}\n                    style={{\n                        padding: '10px',\n                        fontSize: '16px',\n                        border: 'none',\n                        borderRadius: '5px',\n                        boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n                        outline: 'none',\n                        margin: '10px 0',\n                    }}>\n                    <option value=\"javascript\">JavaScript</option>\n                    <option value=\"typescript\">TypeScript</option>\n                    <option value=\"python\">Python</option>\n                    <option value=\"csharp\">C#</option>\n                </select>\n                <button className=\"btn leaveBtn\" onClick={runCode}>\n                    RUN\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n            </div>\n            <div className=\"gridContainer\">\n                <div className=\"editorWrap\">\n                    <Editor\n                        socketRef={socketRef}\n                        roomId={roomId}\n                        onCodeChange={(code) => {\n                            codeRef.current = code;\n                        }}\n                    />\n                </div>\n                <div className=\"outputWrap\" style={{ backgroundColor: '#000', padding: '10px' }}>\n                    <a href=\"#\" style={{ color: '#4aee88', textDecoration: 'none' }}>\n                    {output || 'No output'}\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditorPage;\n"]},"metadata":{},"sourceType":"module"}