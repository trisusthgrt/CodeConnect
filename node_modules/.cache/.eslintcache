[{"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\index.js":"1","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\App.js":"2","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\reportWebVitals.js":"3","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\pages\\Home.js":"4","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\pages\\EditorPage.js":"5","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\Actions.js":"6","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\api.js":"7","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\socket.js":"8","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\components\\Client.js":"9","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\components\\Editor.js":"10","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\constants.js":"11"},{"size":500,"mtime":1721335662571,"results":"12","hashOfConfig":"13"},{"size":987,"mtime":1721335662404,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1721335662633,"results":"15","hashOfConfig":"13"},{"size":5285,"mtime":1721337677262,"results":"16","hashOfConfig":"13"},{"size":6173,"mtime":1721335662797,"results":"17","hashOfConfig":"13"},{"size":202,"mtime":1721335662345,"results":"18","hashOfConfig":"13"},{"size":422,"mtime":1721335662467,"results":"19","hashOfConfig":"13"},{"size":323,"mtime":1721337167892,"results":"20","hashOfConfig":"13"},{"size":312,"mtime":1721335662726,"results":"21","hashOfConfig":"13"},{"size":3986,"mtime":1721338103091,"results":"22","hashOfConfig":"13"},{"size":946,"mtime":1721335662509,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kzm6mn",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\index.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\App.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\reportWebVitals.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\pages\\Home.js",["60"],[],"// import React, { useState } from 'react';\n// import { v4 as uuidV4 } from 'uuid';\n// import toast from 'react-hot-toast';\n// import { useNavigate } from 'react-router-dom';\n\n// const Home = () => {\n//     const navigate = useNavigate();\n\n//     const [roomId, setRoomId] = useState('');\n//     const [username, setUsername] = useState('');\n//     const createNewRoom = (e) => {\n//         e.preventDefault();\n//         const id = uuidV4();\n//         setRoomId(id);\n//         toast.success('Created a new room');\n//     };\n\n//     const joinRoom = () => {\n//         if (!roomId || !username) {\n//             toast.error('ROOM ID & username is required');\n//             return;\n//         }\n\n//         // Redirect\n//         navigate(`/editor/${roomId}`, {\n//             state: {\n//                 username,\n//             },\n//         });\n//     };\n\n//     const handleInputEnter = (e) => {\n//         if (e.code === 'Enter') {\n//             joinRoom();\n//         }\n//     };\n//     return (\n//         <div className=\"homePageWrapper\">\n//             <div className=\"formWrapper\">\n//                 <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\n//                 <div className=\"inputGroup\">\n//                     <input\n//                         type=\"text\"\n//                         className=\"inputBox\"\n//                         placeholder=\"ROOM ID\"\n//                         onChange={(e) => setRoomId(e.target.value)}\n//                         value={roomId}\n//                         onKeyUp={handleInputEnter}\n//                     />\n//                     <input\n//                         type=\"text\"\n//                         className=\"inputBox\"\n//                         placeholder=\"USERNAME\"\n//                         onChange={(e) => setUsername(e.target.value)}\n//                         value={username}\n//                         onKeyUp={handleInputEnter}\n//                     />\n//                     <button className=\"btn joinBtn\" onClick={joinRoom}>\n//                         Join\n//                     </button>\n//                     <span className=\"createInfo\">\n//                         If you don't have an invite then create &nbsp;\n//                         <a\n//                             onClick={createNewRoom}\n//                             href=\"\"\n//                             className=\"createNewBtn\"\n//                         >\n//                             new room\n//                         </a>\n//                     </span>\n//                 </div>\n//             </div>\n//             <footer>\n//             </footer>\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\n\nconst Home = () => {\n    const navigate = useNavigate();\n    const [roomId, setRoomId] = useState('');\n    const [username, setUsername] = useState('');\n\n    const createNewRoom = (e) => {\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success('Created a new room');\n        navigateToRoom(id);  // Automatically navigate to the new room\n    };\n\n    const joinRoom = () => {\n        if (!roomId || !username) {\n            toast.error('ROOM ID & username is required');\n            return;\n        }\n        navigateToRoom(roomId); // Navigate to the existing room\n    };\n\n    const navigateToRoom = (roomId) => {\n        navigate(`/editor/${roomId}`, {\n            state: {\n                username,\n            },\n        });\n    };\n\n    const handleInputEnter = (e) => {\n        if (e.code === 'Enter') {\n            joinRoom();\n        }\n    };\n\n    return (\n        <div className=\"homePageWrapper\">\n            <div className=\"formWrapper\">\n                <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\n                <div className=\"inputGroup\">\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"ROOM ID\"\n                        onChange={(e) => setRoomId(e.target.value)}\n                        value={roomId}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"USERNAME\"\n                        onChange={(e) => setUsername(e.target.value)}\n                        value={username}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <button className=\"btn joinBtn\" onClick={joinRoom}>\n                        Join\n                    </button>\n                    <span className=\"createInfo\">\n                        If you don't have an invite then create &nbsp;\n                        <a\n                            onClick={createNewRoom}\n                            href=\"\"\n                            className=\"createNewBtn\"\n                        >\n                            new room\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <footer></footer>\n        </div>\n    );\n};\n\nexport default Home;\n","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\pages\\EditorPage.js",["61","62"],[],"import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { executeCode } from '../api';\nimport {\n    useLocation,\n    useNavigate,\n    Navigate,\n    useParams,\n} from 'react-router-dom';\n\nconst EditorPage = () => {\n    const [language, setLanguage] = useState('javascript');\n    const [output, setOutput] = useState('');\n\n\n    const socketRef = useRef(null);\n    const codeRef = useRef(null);\n    const location = useLocation();\n    const { roomId } = useParams();\n    const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n\n\n    const runCode = async () => {\n        const code = codeRef.current;\n        try {\n            const response = await executeCode(language, code);\n            if (response.data && response.data.run) {\n                const { stdout, stderr } = response.data.run;\n                setOutput(stdout ? stdout : stderr);\n                console.log('Output:', stdout ? stdout : stderr);\n            } else {\n                console.error('Unexpected API response:', response);\n            }\n        } catch (error) {\n            console.error('Error running code:', error);\n        }\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n            function handleErrors(e) {\n                console.log('socket error', e);\n                toast.error('Socket connection failed, try again later.');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            // Listening for joined event\n            socketRef.current.on(\n                ACTIONS.JOINED,\n                ({ clients, username, socketId }) => {\n                    if (username !== location.state?.username) {\n                        toast.success(`${username} joined the room.`);\n                        console.log(`${username} joined`);\n                    }\n                    setClients(clients);\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                        code: codeRef.current,\n                        socketId,\n                    });\n                }\n            );\n\n            // Listening for disconnected\n            socketRef.current.on(\n                ACTIONS.DISCONNECTED,\n                ({ socketId, username }) => {\n                    toast.success(`${username} left the room.`);\n                    setClients((prev) => {\n                        return prev.filter(\n                            (client) => client.socketId !== socketId\n                        );\n                    });\n                }\n            );\n        };\n        init();\n        return () => {\n            socketRef.current.disconnect();\n            socketRef.current.off(ACTIONS.JOINED);\n            socketRef.current.off(ACTIONS.DISCONNECTED);\n        };\n    }, []);\n\n    async function copyRoomId() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success('Room ID has been copied to your clipboard');\n        } catch (err) {\n            toast.error('Could not copy the Room ID');\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n\n    if (!location.state) {\n        return <Navigate to=\"/\" />;\n    }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <select value={language} onChange={(e) => setLanguage(e.target.value)}\n                    style={{\n                        padding: '10px',\n                        fontSize: '16px',\n                        border: 'none',\n                        borderRadius: '5px',\n                        boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n                        outline: 'none',\n                        margin: '10px 0',\n                    }}>\n                    <option value=\"javascript\">JavaScript</option>\n                    <option value=\"typescript\">TypeScript</option>\n                    <option value=\"python\">Python</option>\n                    <option value=\"csharp\">C#</option>\n                </select>\n                <button className=\"btn leaveBtn\" onClick={runCode}>\n                    RUN\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n            </div>\n            <div className=\"gridContainer\">\n                <div className=\"editorWrap\">\n                    <Editor\n                        socketRef={socketRef}\n                        roomId={roomId}\n                        onCodeChange={(code) => {\n                            codeRef.current = code;\n                        }}\n                    />\n                </div>\n                <div className=\"outputWrap\" style={{ backgroundColor: '#000', padding: '10px' }}>\n                    <a href=\"#\" style={{ color: '#4aee88', textDecoration: 'none' }}>\n                    {output || 'No output'}\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditorPage;\n","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\Actions.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\api.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\socket.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\components\\Client.js",[],[],"C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\components\\Editor.js",["63","64","65"],[],"// import React, { useEffect, useRef } from 'react';\n// import Codemirror from 'codemirror';\n// import 'codemirror/lib/codemirror.css';\n// import 'codemirror/theme/dracula.css';\n// import 'codemirror/mode/javascript/javascript';\n// import 'codemirror/addon/edit/closetag';\n// import 'codemirror/addon/edit/closebrackets';\n// import ACTIONS from '../Actions';\n\n// const Editor = ({ socketRef, roomId, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     useEffect(() => {\n//         async function init() {\n//             editorRef.current = Codemirror.fromTextArea(\n//                 document.getElementById('realtimeEditor'),\n//                 {\n//                     mode: { name: 'javascript', json: true },\n//                     theme: 'dracula',\n//                     autoCloseTags: true,\n//                     autoCloseBrackets: true,\n//                     lineNumbers: true,\n//                 }\n//             );\n\n//             editorRef.current.on('change', (instance, changes) => {\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code);\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomId,\n//                         code,\n//                     });\n//                 }\n//             });\n//         }\n//         init();\n//     }, []);\n\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.setValue(code);\n//                 }\n//             });\n//         }\n\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE);\n//         };\n//     }, [socketRef.current]);\n\n//     return <textarea id=\"realtimeEditor\"></textarea>;\n// };\n\n// export default Editor;\n\n\nimport React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n\n    useEffect(() => {\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: { name: 'javascript', json: true },\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, [roomId]);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            // Listen for code changes from other users\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                console.log('Received code change:', code);\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        // Cleanup listener on unmount\n        return () => {\n            if (socketRef.current) {\n                socketRef.current.off(ACTIONS.CODE_CHANGE);\n            }\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n","C:\\Users\\ASUS\\Downloads\\mini-project-master\\mini-project-master\\src\\constants.js",[],[],{"ruleId":"66","severity":1,"message":"67","line":146,"column":25,"nodeType":"68","endLine":150,"endColumn":26},{"ruleId":"69","severity":1,"message":"70","line":96,"column":8,"nodeType":"71","endLine":96,"endColumn":10,"suggestions":"72"},{"ruleId":"66","severity":1,"message":"67","line":168,"column":21,"nodeType":"68","endLine":168,"endColumn":86},{"ruleId":"69","severity":1,"message":"73","line":98,"column":8,"nodeType":"71","endLine":98,"endColumn":16,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"75","line":114,"column":27,"nodeType":"76","endLine":114,"endColumn":34},{"ruleId":"69","severity":1,"message":"77","line":117,"column":8,"nodeType":"71","endLine":117,"endColumn":27,"suggestions":"78"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'onCodeChange' and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["80"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"88","text":"89"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"90","text":"91"},"Update the dependencies array to be: [socketRef]",{"range":"92","text":"93"},[3290,3292],"[location.state?.username, reactNavigator, roomId]",[3302,3310],"[onCodeChange, roomId, socketRef]",[3882,3901],"[socketRef]"]